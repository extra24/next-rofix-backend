version: 0.2

env:
  variables:
    AWS_REGION: ap-northeast-2
    IMAGE_REPO_NAME: fitspot-app
    IMAGE_TAG: latest
    CONTAINER_NAME: app1
    GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2048m"
    _JAVA_OPTIONS: "-Xmx1536m"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Installing dependencies..."
      - java -version
      - docker --version

  pre_build:
    commands:
      - echo "=== Gradle setup and build start ==="

      - echo "Normalizing gradlew permissions..."
      - sed -i 's/\r$//' ./gradlew || true
      - chmod +x ./gradlew
      - ls -la ./gradlew

  build:
    commands:
      - echo "Checking Gradle version..."
      - ./gradlew --version

      - echo "Starting Gradle build..."
      - ./gradlew clean build -x test --no-daemon --stacktrace

      - echo "=== 상세 파일 시스템 디버깅 ==="
      - pwd
      - ls -la
      - echo "--- build 디렉토리 확인 ---"
      - ls -la build/ || echo "build 디렉토리 없음"
      - echo "--- build/libs 디렉토리 확인 ---"
      - ls -la build/libs/ || echo "build/libs 디렉토리 없음"
      - echo "--- 모든 .jar 파일 찾기 ---"
      - find . -name "*.jar" -type f -ls
      - echo "--- 파일 권한 확인 ---"
      - ls -la build/libs/webservice-0.0.1-SNAPSHOT.jar || echo "JAR 파일 없음"

      - |
        if [ ! -f "build/libs/webservice-0.0.1-SNAPSHOT.jar" ]; then
          echo "ERROR: JAR file not found!"
          echo "Available files in build/libs:"
          ls -la build/libs/ || echo "No build/libs directory"
          exit 1
        fi

      - echo "=== AWS and ECR setup ==="
      - REGION="${AWS_REGION:-ap-northeast-2}"
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
      - REPOSITORY_URI="${ECR_REGISTRY}/${IMAGE_REPO_NAME}"
      - echo "REGION=$REGION"
      - echo "ACCOUNT_ID=$ACCOUNT_ID"
      - echo "ECR_REGISTRY=$ECR_REGISTRY"
      - echo "REPOSITORY_URI=$REPOSITORY_URI"

      - echo "ECR login attempt..."
      - aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"

      - echo "=== Docker image build and push ==="

      - echo "=== Docker 빌드 직전 최종 확인 ==="
      - pwd
      - ls -la
      - echo "--- Dockerfile 내용 확인 ---"
      - cat Dockerfile
      - echo "--- build/libs 디렉토리 재확인 ---"
      - ls -la build/libs/
      - echo "--- JAR 파일 재확인 ---"
      - ls -la build/libs/webservice-0.0.1-SNAPSHOT.jar
      - file build/libs/webservice-0.0.1-SNAPSHOT.jar

      - echo "=== Docker 빌드 컨텍스트 확인 ==="
      - echo "Docker 빌드 시작..."
      - docker build --no-cache -t ${IMAGE_REPO_NAME}:${IMAGE_TAG} . || (echo "Docker build failed, showing detailed info:" && ls -la && ls -la build/libs/ && exit 1)

      - docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:${IMAGE_TAG}
      - echo "Pushing image to ECR..."
      - docker push ${REPOSITORY_URI}:${IMAGE_TAG}
      - IMAGE_URI=${REPOSITORY_URI}:${IMAGE_TAG}
      - echo "Final image URI=$IMAGE_URI"

  post_build:
    commands:
      - echo "=== Generate imagedefinitions.json ==="
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$IMAGE_URI" > imagedefinitions.json
      - echo "Generated imagedefinitions.json:"
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json

cache:
  paths:
    - '/root/.gradle/**/*'