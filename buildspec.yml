version: 0.2

env:
  variables:
    AWS_REGION: ap-northeast-2
    IMAGE_REPO_NAME: fitspot-app
    IMAGE_TAG: latest
    CONTAINER_NAME: app1
    GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2048m"
    _JAVA_OPTIONS: "-Xmx1536m"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Installing dependencies..."
      - java -version
      - docker --version

  pre_build:
    commands:
      - echo "=== Gradle setup and build start ==="

      - echo "Normalizing gradlew permissions..."
      - sed -i 's/\r$//' ./gradlew || true
      - chmod +x ./gradlew
      - ls -la ./gradlew

      - echo "Checking Gradle version..."
      - ./gradlew --version

      - echo "Starting Gradle build..."
      # 빌드 실패 시 중단되도록 수정
      - ./gradlew clean build -x test --no-daemon --stacktrace

      - echo "Verifying JAR file creation..."
      - ls -al build/libs/
      - |
        if [ ! -f "build/libs/webservice-0.0.1-SNAPSHOT.jar" ]; then
          echo "ERROR: JAR file not found!"
          exit 1
        fi

      - echo "JAR file verified successfully"
      - find . -name "*.jar" -type f

      - echo "=== AWS and ECR setup ==="
      - REGION="${AWS_REGION:-ap-northeast-2}"
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
      - REPOSITORY_URI="${ECR_REGISTRY}/${IMAGE_REPO_NAME}"
      - echo "REGION=$REGION"
      - echo "ACCOUNT_ID=$ACCOUNT_ID"
      - echo "ECR_REGISTRY=$ECR_REGISTRY"
      - echo "REPOSITORY_URI=$REPOSITORY_URI"

      - echo "ECR login attempt..."
      - aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"

  build:
    commands:
      - echo "=== Docker image build and push ==="

      # Docker 빌드 전 파일 존재 재확인
      - echo "Final verification before Docker build..."
      - ls -la build/libs/webservice-0.0.1-SNAPSHOT.jar

      - echo "Building Docker image..."
      - docker build -t ${IMAGE_REPO_NAME}:${IMAGE_TAG} .
      - docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:${IMAGE_TAG}
      - echo "Pushing image to ECR..."
      - docker push ${REPOSITORY_URI}:${IMAGE_TAG}
      - IMAGE_URI=${REPOSITORY_URI}:${IMAGE_TAG}
      - echo "Final image URI=$IMAGE_URI"

  post_build:
    commands:
      - echo "=== Generate imagedefinitions.json ==="
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$IMAGE_URI" > imagedefinitions.json
      - echo "Generated imagedefinitions.json:"
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json

cache:
  paths:
    - '/root/.gradle/**/*'